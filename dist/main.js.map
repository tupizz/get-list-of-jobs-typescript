{"version":3,"file":"main.js","sources":["../src/errors/validation.error.ts","../src/utils/date-utils.ts","../src/mappers/schemas/payload-schema.ts","../src/mappers/payload-to-job.ts","../src/utils/chunk-items-by-max-time.ts","../src/utils/order-by-priority.ts","../src/main.ts"],"sourcesContent":["export class ValidationError extends Error {}\n","import { parse } from 'date-fns';\n\nexport class DateUtils {\n  static getParsedDate(date: string): Date {\n    return parse(date, 'yyyy-MM-dd kk:mm:ss', new Date(date));\n  }\n}\n","import * as Joi from 'joi';\n\nexport const payloadSchema = Joi.object({\n  'ID': Joi.number().required(),\n  'Descrição': Joi.string().required(),\n  'Data Máxima de conclusão': Joi.string()\n    .pattern(new RegExp(/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/))\n    .required(),\n  'Tempo estimado': Joi.string()\n    .pattern(new RegExp(/[0-9]{1} horas/))\n    .required(),\n});\n","import { ValidationError } from '../errors/validation.error';\nimport { JobDto, Payload } from '../model/index.model';\nimport { DateUtils } from '../utils/date-utils';\nimport { payloadSchema } from './schemas/payload-schema';\n\nexport class MapPayloadToJob {\n  private static validate(payload: Payload) {\n    return payloadSchema.validate(payload);\n  }\n\n  static transform(payload: Payload): JobDto {\n    const { error } = this.validate(payload);\n    if (error) {\n      throw new ValidationError();\n    }\n\n    return {\n      description: payload['Descrição'],\n      estimatedHoursToFinish: parseInt(payload['Tempo estimado'].split(' ')[0]),\n      id: payload['ID'],\n      maxDateToFinish: DateUtils.getParsedDate(payload['Data Máxima de conclusão']),\n    };\n  }\n}\n","import { JobDto } from '../model/job-dto.model';\n\nexport const chunkItemsIdByMaxTimeOfDay = (maxTime: number, jobs: JobDto[]) => {\n  const chunked = [];\n  let indexChunk = 0;\n  let hoursAccumulatorOfDay = 0;\n\n  for (const item of jobs) {\n    if (hoursAccumulatorOfDay + item.estimatedHoursToFinish > maxTime) {\n      indexChunk += 1;\n      hoursAccumulatorOfDay = 0;\n    }\n\n    hoursAccumulatorOfDay += item.estimatedHoursToFinish;\n    chunked[indexChunk] = chunked[indexChunk] ? [...chunked[indexChunk], item.id] : [item.id];\n  }\n\n  return chunked;\n};\n","import { differenceInHours } from 'date-fns';\n\nimport { JobDto } from '../model/job-dto.model';\n\nexport const orderByPriority = (start: Date, jobs: JobDto[]) => {\n  return jobs.sort((aJob: JobDto, bJob: JobDto) => {\n    const maxHoursToFinishJobA = differenceInHours(aJob.maxDateToFinish, start);\n    const maxHoursToFinishJobB = differenceInHours(bJob.maxDateToFinish, start);\n    return maxHoursToFinishJobA < maxHoursToFinishJobB ? -1 : 1;\n  });\n};\n","import { MapPayloadToJob } from './mappers/payload-to-job';\nimport { Payload, ExecutionWindow } from './model/index.model';\nimport { chunkItemsIdByMaxTimeOfDay } from './utils/chunk-items-by-max-time';\nimport { DateUtils } from './utils/date-utils';\nimport { orderByPriority } from './utils/order-by-priority';\n\nconst MAX_TIME = 8;\n\nexport const getArrayOfJobs = (payloads: Payload[], executionWindow: ExecutionWindow) => {\n  const jobDtos = payloads.map((payloadItem) => MapPayloadToJob.transform(payloadItem));\n  const startAsDate = DateUtils.getParsedDate(executionWindow.start);\n  const orderedJobs = orderByPriority(startAsDate, jobDtos);\n  return chunkItemsIdByMaxTimeOfDay(MAX_TIME, orderedJobs);\n};\n\n(async function run() {\n  const payload = [\n    {\n      'ID': 1,\n      'Descrição': 'Importação de arquivos de fundos',\n      'Data Máxima de conclusão': '2019-11-10 12:00:00',\n      'Tempo estimado': '2 horas',\n    },\n    {\n      'ID': 2,\n      'Descrição': 'Importação de dados da Base Legada',\n      'Data Máxima de conclusão': '2019-11-11 12:00:00',\n      'Tempo estimado': '4 horas',\n    },\n    {\n      'ID': 3,\n      'Descrição': 'Importação de dados de integração',\n      'Data Máxima de conclusão': '2019-11-11 08:00:00',\n      'Tempo estimado': '6 horas',\n    },\n  ];\n\n  const executionWindow = {\n    start: '2019-11-10 09:00:00',\n    end: '2019-11-11 12:00:00',\n  };\n\n  const result = getArrayOfJobs(payload, executionWindow);\n\n  console.log(result);\n})();\n"],"names":["ValidationError","Error","DateUtils","date","parse","Date","payloadSchema","Joi","required","pattern","RegExp","MapPayloadToJob","payload","validate","error","description","estimatedHoursToFinish","parseInt","split","id","maxDateToFinish","getParsedDate","chunkItemsIdByMaxTimeOfDay","maxTime","jobs","chunked","indexChunk","hoursAccumulatorOfDay","item","orderByPriority","start","sort","aJob","bJob","maxHoursToFinishJobA","differenceInHours","maxHoursToFinishJobB","MAX_TIME","getArrayOfJobs","payloads","executionWindow","jobDtos","map","payloadItem","transform","startAsDate","orderedJobs","end","result","console","log","run"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAaA,eAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,qDAAqCC,KAArC;;ICEaC,SAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,kCACuBC,IADvB,EAC2C;AACvC,aAAOC,aAAK,CAACD,IAAD,EAAO,qBAAP,EAA8B,IAAIE,IAAJ,CAASF,IAAT,CAA9B,CAAZ;AACD;AAHH;;AAAA;AAAA;;ACAO,IAAMG,aAAa,GAAGC,UAAA,CAAW;AACtC,QAAMA,UAAA,GAAaC,QAAb,EADgC;AAEtC,eAAaD,UAAA,GAAaC,QAAb,EAFyB;AAGtC,8BAA4BD,UAAA,GACzBE,OADyB,CACjB,IAAIC,MAAJ,CAAW,uDAAX,CADiB,EAEzBF,QAFyB,EAHU;AAMtC,oBAAkBD,UAAA,GACfE,OADe,CACP,IAAIC,MAAJ,CAAW,gBAAX,CADO,EAEfF,QAFe;AANoB,CAAX,CAAtB;;ICGMG,eAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAC0BC,OAD1B,EAC4C;AACxC,aAAON,aAAa,CAACO,QAAd,CAAuBD,OAAvB,CAAP;AACD;AAHH;AAAA;AAAA,8BAKmBA,OALnB,EAK6C;AAAA,2BACvB,KAAKC,QAAL,CAAcD,OAAd,CADuB;AAAA,UACjCE,KADiC,kBACjCA,KADiC;;AAEzC,UAAIA,KAAJ,EAAW;AACT,cAAM,IAAId,eAAJ,EAAN;AACD;;AAED,aAAO;AACLe,QAAAA,WAAW,EAAEH,OAAO,CAAC,WAAD,CADf;AAELI,QAAAA,sBAAsB,EAAEC,QAAQ,CAACL,OAAO,CAAC,gBAAD,CAAP,CAA0BM,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAD,CAF3B;AAGLC,QAAAA,EAAE,EAAEP,OAAO,CAAC,IAAD,CAHN;AAILQ,QAAAA,eAAe,EAAElB,SAAS,CAACmB,aAAV,CAAwBT,OAAO,CAAC,0BAAD,CAA/B;AAJZ,OAAP;AAMD;AAjBH;;AAAA;AAAA;;;;;;;;ACHO,IAAMU,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,OAAD,EAAkBC,IAAlB,EAAqC;AAC7E,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,qBAAqB,GAAG,CAA5B;;AAH6E,6CAK1DH,IAL0D;AAAA;;AAAA;AAK7E,wDAAyB;AAAA,UAAdI,IAAc;;AACvB,UAAID,qBAAqB,GAAGC,IAAI,CAACZ,sBAA7B,GAAsDO,OAA1D,EAAmE;AACjEG,QAAAA,UAAU,IAAI,CAAd;AACAC,QAAAA,qBAAqB,GAAG,CAAxB;AACD;;AAEDA,MAAAA,qBAAqB,IAAIC,IAAI,CAACZ,sBAA9B;AACAS,MAAAA,OAAO,CAACC,UAAD,CAAP,GAAsBD,OAAO,CAACC,UAAD,CAAP,oDAA0BD,OAAO,CAACC,UAAD,CAAjC,IAA+CE,IAAI,CAACT,EAApD,KAA0D,CAACS,IAAI,CAACT,EAAN,CAAhF;AACD;AAb4E;AAAA;AAAA;AAAA;AAAA;;AAe7E,SAAOM,OAAP;AACD,CAhBM;;ACEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAcN,IAAd,EAAiC;AAC9D,SAAOA,IAAI,CAACO,IAAL,CAAU,UAACC,IAAD,EAAeC,IAAf,EAAgC;AAC/C,QAAMC,oBAAoB,GAAGC,yBAAiB,CAACH,IAAI,CAACZ,eAAN,EAAuBU,KAAvB,CAA9C;AACA,QAAMM,oBAAoB,GAAGD,yBAAiB,CAACF,IAAI,CAACb,eAAN,EAAuBU,KAAvB,CAA9C;AACA,WAAOI,oBAAoB,GAAGE,oBAAvB,GAA8C,CAAC,CAA/C,GAAmD,CAA1D;AACD,GAJM,CAAP;AAKD,CANM;;ACEP,IAAMC,QAAQ,GAAG,CAAjB;IAEaC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAsBC,eAAtB,EAA2D;AACvF,MAAMC,OAAO,GAAGF,QAAQ,CAACG,GAAT,CAAa,UAACC,WAAD;AAAA,WAAiBhC,eAAe,CAACiC,SAAhB,CAA0BD,WAA1B,CAAjB;AAAA,GAAb,CAAhB;AACA,MAAME,WAAW,GAAG3C,SAAS,CAACmB,aAAV,CAAwBmB,eAAe,CAACV,KAAxC,CAApB;AACA,MAAMgB,WAAW,GAAGjB,eAAe,CAACgB,WAAD,EAAcJ,OAAd,CAAnC;AACA,SAAOnB,0BAA0B,CAACe,QAAD,EAAWS,WAAX,CAAjC;AACD;AAED;AAAA,8GAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOlC,YAAAA,OADP,GACiB,CACd;AACE,oBAAM,CADR;AAEE,2BAAa,kCAFf;AAGE,0CAA4B,qBAH9B;AAIE,gCAAkB;AAJpB,aADc,EAOd;AACE,oBAAM,CADR;AAEE,2BAAa,oCAFf;AAGE,0CAA4B,qBAH9B;AAIE,gCAAkB;AAJpB,aAPc,EAad;AACE,oBAAM,CADR;AAEE,2BAAa,mCAFf;AAGE,0CAA4B,qBAH9B;AAIE,gCAAkB;AAJpB,aAbc,CADjB;AAsBO4B,YAAAA,eAtBP,GAsByB;AACtBV,cAAAA,KAAK,EAAE,qBADe;AAEtBiB,cAAAA,GAAG,EAAE;AAFiB,aAtBzB;AA2BOC,YAAAA,MA3BP,GA2BgBV,cAAc,CAAC1B,OAAD,EAAU4B,eAAV,CA3B9B;AA6BCS,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AA7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA,WAAgBG,GAAhB;AAAA;AAAA;;AAAA,SAAgBA,GAAhB;AAAA;;;;"}